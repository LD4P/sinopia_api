openapi: 3.0.3
info:
  description: API for managing Sinopia resources atop Mongo / AWS DocumentDB platform
  version: 1.0.0
  title: Sinopia API
  license:
    name: Apache 2.0
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
servers:
  - url: "https://{environment}.sinopia.io"
    variables:
      environment:
        default: api
        description: Deployment environments
        enum:
          - api
          - api.stage
          - api.development
tags:
  - name: resources
    description: Resources and resource versions
  - name: marc
    description: MARC conversions
  - name: groups
    description: Groups
  - name: monitoring
    description: Healthcheck and monitoring
  - name: users
    description: Users
  - name: metrics
    description: Metrics for reporting
paths:
  /:
    get:
      summary: A healthcheck endpoint
      tags:
        - monitoring
      responses:
        "200":
          description: The status of the service
          content:
            application/json:
              schema:
                type: object
  /metrics/userCount:
    get:
      summary: Get the total number of registered users
      tags:
        - metrics
      responses:
        "200":
          description: The number of registered users
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MetricsCountResponse"
  /metrics/resourceCount/{resourceType}:
    get:
      summary: Get the total number of resources
      tags:
        - metrics
      responses:
        "200":
          description: The number of resources
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MetricsCountResponse"
      parameters:
        - $ref: "#/components/parameters/resourceType"
  /metrics/createdCount/{resourceType}:
    get:
      summary: Get the total number of resources created in a specified time period, optionally filtered by group
      tags:
        - metrics
      responses:
        "200":
          description: The number of resources created during a specified time period
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MetricsCountResponse"
      parameters:
        - $ref: "#/components/parameters/resourceType"
        - name: startDate
          in: query
          schema:
            type: string
            format: date
          required: true
          description: The start date requested for the count (in ISO format, e.g. 2017-07-21)
        - name: endDate
          in: query
          schema:
            type: string
            format: date
          required: true
          description: The end date requested for the count (in ISO format, e.g. 2017-07-21)
        - name: group
          in: query
          schema:
            type: string
          required: false
          description: The group to filter by (e.g. stanford)
  /resource:
    get:
      summary: Returns a paged JSON result of all or filtered resources
      tags:
        - resources
      responses:
        "200":
          description: OK - returns a page of resources
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Resource"
                  links:
                    type: object
                    properties:
                      first:
                        description: URL of first page of results
                        type: string
                      prev:
                        description: URL of previous page of results
                        type: string
                      next:
                        description: URL of next page of results
                        type: string
                    required:
                      - first
                required:
                  - data
                  - links
      parameters:
        - name: limit
          description: The number of resources to return in each page
          in: query
          required: false
          schema:
            type: integer
            default: 25
        - name: start
          description: The number of resources to offset in the result page
          in: query
          required: false
          schema:
            type: integer
            default: 1
        - name: group
          description: Group name filter. For values, see /groups endpoint.
          example: "stanford"
          in: query
          required: false
          schema:
            type: string
        - name: updatedBefore
          description: Resource last updated before filter
          example: "2019-11-08T17:40:23.363Z"
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: updatedAfter
          description: Resource last updated after filter
          example: "2019-11-08T17:40:23.363Z"
          in: query
          required: false
          schema:
            type: string
        - name: type
          description: Class filter
          example: "http://id.loc.gov/ontologies/bibframe/AbbreviatedTitle"
          in: query
          required: false
          schema:
            type: string
  /resource/{resourceId}:
    get:
      summary: Return a representation of the given resource
      tags:
        - resources
      responses:
        "200":
          description: OK - returns resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Resource"
            application/ld+json:
              schema:
                type: string
            text/html:
              schema:
                type: string
            text/n3:
              schema:
                type: string
            text/plain:
              schema:
                type: string
            text/turtle:
              schema:
                type: string
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Errors"
      parameters:
        - name: resourceId
          in: path
          description: ID of the resource
          required: true
          schema:
            type: string
    post:
      summary: Endpoint to insert resources - returns the resource as JSON
      security:
        - bearerAuth: []
      tags:
        - resources
      responses:
        "201":
          description: OK - returns resource
          headers:
            location:
              description: URL of the newly created resource.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Resource"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Errors"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Errors"
        "409":
          description: Conflict - resource already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Errors"
      parameters:
        - name: resourceId
          in: path
          description: ID of the resource
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Resource"
    put:
      summary: Endpoint to update resources - returns the resource as JSON
      security:
        - bearerAuth: []
      tags:
        - resources
      responses:
        "200":
          description: OK - returns resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Resource"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Errors"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Errors"
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Errors"
      parameters:
        - name: resourceId
          in: path
          description: ID of the resource
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Resource"
    delete:
      summary: Endpoint to delete resources
      security:
        - bearerAuth: []
      tags:
        - resources
      responses:
        "204":
          description: Deleted
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Errors"
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Errors"
      parameters:
        - name: resourceId
          in: path
          description: ID of the resource
          required: true
          schema:
            type: string
  /resource/{resourceId}/versions:
    get:
      summary: Returns a metadata document of the resource versions
      tags:
        - resources
      responses:
        "200":
          description: OK - returns metadata document
          content:
            application/json:
              schema:
                type: object
      parameters:
        - name: resourceId
          in: path
          description: ID of the resource
          required: true
          schema:
            type: string
  /resource/{resourceId}/relationships:
    get:
      summary: Returns information about relationships between this resource and other resources
      tags:
        - resources
      responses:
        "200":
          description: OK - returns metadata document
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Relationships"
      parameters:
        - name: resourceId
          in: path
          description: ID of the resource
          required: true
          schema:
            type: string

  /resource/{resourceId}/version/{timestamp}:
    get:
      summary: Return specified version of the resource.
      tags:
        - resources
      responses:
        "200":
          description: OK - returns resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Resource"
      parameters:
        - name: resourceId
          in: path
          description: ID of the resource
          required: true
          schema:
            type: string
        - name: timestamp
          in: path
          description: Timestamp (version) of the resource to retrieve
          example: "2020-08-20T11:34:40.887Z"
          required: true
          schema:
            type: string
            format: date-time
  /marc/{resourceId}/job/{username}/{timestamp}:
    get:
      summary: Returns the status of the MARC conversion job
      tags:
        - marc
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: string
        "303":
          description: Redirect to MARC version url
          content:
            text/plain:
              schema:
                type: string
        "500":
          description: Server error indicating the conversion failed
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/Errors"
      parameters:
        - name: resourceId
          in: path
          description: ID of the resource
          required: true
          schema:
            type: string
        - name: username
          in: path
          description: Username of the user that requested the MARC conversion job
          required: true
          schema:
            type: string
        - name: timestamp
          in: path
          description: Timestamp (version) of the resource to retrieve
          required: true
          schema:
            type: string
        - name: accept
          in: header
          schema:
            type: string
  /marc/{resourceId}/version/{username}/{timestamp}:
    get:
      summary: Return the marc record for the given resource version
      tags:
        - marc
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: string
            application/marc:
              schema:
                type: string
      parameters:
        - name: resourceId
          in: path
          description: ID of the resource
          required: true
          schema:
            type: string
        - name: username
          in: path
          description: Username of the resource creator
          required: true
          schema:
            type: string
        - name: timestamp
          in: path
          description: Timestamp (version) of the resource to retrieve
          required: true
          schema:
            type: string
  /marc/{resourceId}:
    post:
      summary: Request conversion of a resource to MARC
      security:
        - bearerAuth: []
      tags:
        - marc
      responses:
        "202":
          description: Accepted
          headers:
            content-location:
              description: The URL for checking the status of the MARC conversion job.
              schema:
                type: string
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Errors"
        "404":
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Errors"
      parameters:
        - name: resourceId
          in: path
          description: ID of the resource
          required: true
          schema:
            type: string
  /groups:
    get:
      summary: List groups
      tags:
        - groups
      responses:
        "200":
          description: "OK - returns list of groups"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Groups"
  /transfer/{resourceId}/{targetGroup}/{targetSystem}:
    post:
      summary: publish a Sinopia resource to the target group's target system (e.g. stanford's ILS)
      responses:
        "204":
          description: "OK - a message was queued for the transfer request"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Errors"
      parameters:
        - name: resourceId
          in: path
          description: ID of the resource
          required: true
          schema:
            type: string
        - name: targetGroup
          in: path
          description: name of the group to which the resource should go
          required: true
          schema:
            type: string
        - name: targetSystem
          in: path
          description: system to which the resource should go
          example: "ils"
          required: true
          schema:
            type: string
  /user/{userId}:
    get:
      summary: Return data for a user
      tags:
        - users
      responses:
        "200":
          description: "OK - returns user data"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Errors"
      parameters:
        - name: userId
          in: path
          description: ID of the user
          required: true
          schema:
            type: string
    post:
      summary: Create a new user
      tags:
        - users
      security:
        - bearerAuth: []
      responses:
        "201":
          description: OK - returns user
          headers:
            location:
              description: URL of the newly created user.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Errors"
        "409":
          description: Conflict - user already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Errors"
      parameters:
        - name: userId
          in: path
          description: ID of the user
          required: true
          schema:
            type: string
  /user/{userId}/history/{historyType}/{historyItemId}:
    put:
      summary: Add a new item to history
      tags:
        - users
      security:
        - bearerAuth: []
      responses:
        "200":
          description: OK - returns user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Errors"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Errors"
      parameters:
        - name: userId
          in: path
          description: ID of the user
          required: true
          schema:
            type: string
        - name: historyType
          in: path
          description: History type
          required: true
          schema:
            type: string
            enum:
              - template
              - resource
              - search
        - name: historyItemId
          in: path
          description: ID of the history item
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                payload:
                  description: Payload for the history. The client application determines the contents and structure of the payload.
                  type: string
              required:
                - payload
components:
  parameters:
    resourceType:
      in: path
      name: resourceType
      required: true
      description: The available resource types to request for metrics
      schema:
        type: string
        enum:
          - template
          - resource
          - all
  schemas:
    MetricsCountResponse:
      description: Response from metrics endpoints that provide counts.
      type: object
      properties:
        count:
          description: The number of items matching the metric query.
          type: integer
    History:
      description: History for a particular history type.
      type: array
      items:
        type: object
        properties:
          id:
            description: ID for the history item.
            type: string
          payload:
            description: Payload for the history. The client application determines the contents and structure of the payload.
            type: string
        required:
          - id
          - payload
    Errors:
      description: Errors response.
      type: array
      items:
        type: object
        properties:
          title:
            type: string
          details:
            type: string
          status:
            type: string
        required:
          - title
          - status
    Relationships:
      description: Response describing the relationships between this resource and other resources.
      type: object
      properties:
        bfAdminMetadataRefs:
          description: Relationships to Bibframe AdminMetadata contained within this record.
          type: array
          items:
            type: string
        bfItemRefs:
          description: Relationships to Bibframe Items contained within this record.
          type: array
          items:
            type: string
        bfInstanceRefs:
          description: Relationships to Bibframe Instances contained within this record.
          type: array
          items:
            type: string
        bfWorkRefs:
          description: Relationships to Bibframe Instances contained within this record.
          type: array
          items:
            type: string
        bfAdminMetadataInferredRefs:
          description: Relationships to Bibframe AdminMetadata inferred from other resources.
          type: array
          items:
            type: string
        bfItemInferredRefs:
          description: Relationships to Bibframe Items inferred from other resources.
          type: array
          items:
            type: string
        bfInstanceInferredRefs:
          description: Relationships to Bibframe Instances inferred from other resources.
          type: array
          items:
            type: string
        bfWorkInferredRefs:
          description: Relationships to Bibframe Instances inferred from other resources.
          type: array
          items:
            type: string
        bfAdminMetadataAllRefs:
          description: Relationships to Bibframe AdminMetadata contained within this record and inferred from other resources.
          type: array
          items:
            type: string
        bfItemAllRefs:
          description: Relationships to Bibframe Items contained within this record and inferred from other resources.
          type: array
          items:
            type: string
        bfInstanceAllRefs:
          description: Relationships to Bibframe Instances contained within this record and inferred from other resources.
          type: array
          items:
            type: string
        bfWorkAllRefs:
          description: Relationships to Bibframe Instances contained within this record and inferred from other resources.
          type: array
          items:
            type: string
        id:
          description: The identifier for the resource, which is the final section of the URI.
          example: "6852a770-2961-4836-a833-0b21a9b68041"
          type: string
      required:
        - id
        - bfAdminMetadataRefs
        - bfItemRefs
        - bfInstanceRefs
        - bfWorkRefs
        - bfAdminMetadataInferredRefs
        - bfItemInferredRefs
        - bfInstanceInferredRefs
        - bfWorkInferredRefs
        - bfAdminMetadataAllRefs
        - bfItemAllRefs
        - bfInstanceAllRefs
        - bfWorkAllRefs
    Resource:
      description: Response for a single resource record.
      type: object
      properties:
        data:
          description: The resource as JSON-LD.
          type: array
          items:
            type: object
        bfAdminMetadataRefs:
          description: Relationships to Bibframe AdminMetadata contained within this record.
          type: array
          items:
            type: string
        bfItemRefs:
          description: Relationships to Bibframe Items contained within this record.
          type: array
          items:
            type: string
        bfInstanceRefs:
          description: Relationships to Bibframe Instances contained within this record.
          type: array
          items:
            type: string
        bfWorkRefs:
          description: Relationships to Bibframe Instances contained within this record.
          type: array
          items:
            type: string
        editGroups:
          description: Groups whose members can edit this record.
          type: array
          items:
            type: string
        group:
          description: The group to which the record belongs.
          type: string
        id:
          description: The identifier for the resource, which is the final section of the URI.
          example: "6852a770-2961-4836-a833-0b21a9b68041"
          type: string
        timestamp:
          description: The date and time the resource was last updated. This also identifies the resource version.
          example: "2020-08-20T11:34:40.887Z"
          type: string
          format: date-time
        types:
          description: The classes for the record.
          example:
            - http://id.loc.gov/ontologies/bibframe/AbbreviatedTitle
          type: array
          items:
            type: string
        uri:
          description: The URI for the resource.
          example: "https://api.development.sinopia.io/resource/6852a770-2961-4836-a833-0b21a9b68041"
          type: string
        user:
          description: Username for the user who last updated the record.
          type: string
      required:
        - data
        - bfAdminMetadataRefs
        - bfItemRefs
        - bfInstanceRefs
        - bfWorkRefs
        - group
        - editGroups
        - types
        - user
    ResourcePage:
      description: Response containing a page of resource records.
      type: object
      properties:
        data:
          description: The resources.
          type: array
          items:
            $ref: "#/components/schemas/Resource"
        links:
          description: Links to other pages.
          type: object
          properties:
            first:
              description: Link to first page.
              type: string
            prev:
              description: Link for previous page.
              type: string
            next:
              description: Link to next page.
              type: string
          required:
            - first
      required:
        - data
        - links
    User:
      description: Response containing user data.
      type: object
      properties:
        data:
          description: The user data.
          type: object
          properties:
            history:
              description: History for the user.
              type: object
              properties:
                template:
                  $ref: "#/components/schemas/History"
                resource:
                  $ref: "#/components/schemas/History"
                search:
                  $ref: "#/components/schemas/History"
              required:
                - template
                - resource
                - search
          required:
            - history
        id:
          description: The user's ID.
          type: string
      required:
        - data
        - id
    Groups:
      description: Response containing list of groups
      type: object
      properties:
        data:
          description: The list of groups
          type: array
          items:
            description: A single group
            type: object
            properties:
              id:
                description: The unique ID of the group
                type: string
              label:
                description: The name of the group shown to the user
                type: string
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
