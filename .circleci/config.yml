# Javascript Node CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#

defaults: &defaults
  docker:
    - image: circleci/node:14.11.0
  working_directory: ~/sinopia_api

version: 2
jobs:
  dependencies:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          key: dependencies-prod-{{ checksum "package-lock.json" }}
      - run: npm install --only=production
      - save_cache:
          key: dependencies-prod-{{ checksum "package-lock.json" }}
          paths:
            - node_modules
      - restore_cache:
          key: dependencies-ci-{{ checksum "package-lock.json" }}
      - run: npm install # including CI/Test dependencies
      - save_cache:
          key: dependencies-ci-{{ checksum "package-lock.json" }}
          paths:
            - node_modules
  build:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          key: dependencies-ci-{{ checksum "package-lock.json" }}
      # - run:
      #     name: Setup Code Climate test-reporter
      #     command: |
      #       curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
      #       chmod +x ./cc-test-reporter
      - run:
          name: Lint and run unit tests
          command: |
            # ./cc-test-reporter before-build
            npm run ci
            # ./cc-test-reporter after-build --exit-code $?
      - run:
          name: Validate API specification
          command: |
            sudo npm install -g openapi-enforcer-cli
            result=$(openapi-enforcer validate openapi.yml)
            [[ $result =~ "Document is valid" ]] && {
            echo "Validation good"
            exit 0
            } || {
            echo $result
            exit 1
            }
  register_latest_image:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker
      - restore_cache: # gives us back matching node_modules
          key: dependencies-prod-{{ checksum "package-lock.json" }}
      - attach_workspace:
          at: .
      - run:
          name: Build & Register Images
          command: |
            echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
            docker build -t ld4p/sinopia_api:latest .
            docker push ld4p/sinopia_api:latest
            docker build -t ld4p/sinopia_dev_setup:latest -f Dockerfile-setup .
            docker push ld4p/sinopia_dev_setup:latest
            docker build -t ld4p/sinopia_dev_setup:cypress -f Dockerfile-setup-cypress .
            docker push ld4p/sinopia_dev_setup:cypress
  register_stage_image:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker
      - restore_cache: # gives us back matching node_modules
          key: dependencies-prod-{{ checksum "package-lock.json" }}
      - attach_workspace:
          at: .
      - run:
          name: Build & Register Images
          command: |
            docker build -t ld4p/sinopia_api:release-stage .
            echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
            docker push ld4p/sinopia_api:release-stage
  register_stage_and_prod_image:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker
      - restore_cache: # gives us back matching node_modules
          key: dependencies-prod-{{ checksum "package-lock.json" }}
      - attach_workspace:
          at: .
      - run:
          name: Build & Register Images
          command: |
            docker build -t ld4p/sinopia_api:release-stage -t ld4p/sinopia_api:release-prod .
            echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
            docker push ld4p/sinopia_api:release-stage
            docker push ld4p/sinopia_api:release-prod
  update_ecs_dev:
    working_directory: ~/sinopia_api
    docker: # NOT the default
      - image: circleci/python:3.7-stretch-node-browsers
    steps:
      - run: sudo pip install awscli
      - run:
          name: Update AWS ECS
          command: |
            mkdir ~/.aws
            echo -e "[circle]\naws_access_key_id=$CIRCLE_ACCESS_KEY_ID\naws_secret_access_key=$CIRCLE_SECRET_KEY\n" > ~/.aws/credentials
            unset AWS_SESSION_TOKEN
            aws configure set region us-west-2
            aws configure set output json
            temp_creds=$(aws sts assume-role --role-session-name DevelopersRole --role-arn $DEV_ROLE_ARN --profile circle | jq .Credentials)
            export AWS_ACCESS_KEY_ID=$(echo "$temp_creds" | jq .AccessKeyId | xargs)
            export AWS_SECRET_ACCESS_KEY=$(echo "$temp_creds" | jq .SecretAccessKey | xargs)
            export AWS_SESSION_TOKEN=$(echo "$temp_creds" | jq .SessionToken | xargs)
            aws configure list # Show confirmation of config
            task_arn=$(aws ecs list-task-definitions --family-prefix sinopia-api --region us-west-2 --sort DESC --max-items 1 | jq --raw-output --exit-status '.taskDefinitionArns[]')
            cluster_arn=$(aws ecs list-clusters --region us-west-2 | jq --raw-output --exit-status '.clusterArns[] | select(contains(":cluster/sinopia-dev"))')
            # echo -n "task_arn=$task_arn\ncluster_arn=$cluster_arn\n"
            aws ecs update-service --service sinopia-api --region us-west-2 --cluster $cluster_arn --task-definition $task_arn --force-new-deployment
  update_ecs_stage:
    working_directory: ~/sinopia_api
    docker: # NOT the default
      - image: circleci/python:3.7-stretch-node-browsers
    steps:
      - run: sudo pip install awscli
      - run:
          name: Update AWS ECS
          command: |
            mkdir ~/.aws
            echo -e "[circle]\naws_access_key_id=$CIRCLE_ACCESS_KEY_ID\naws_secret_access_key=$CIRCLE_SECRET_KEY\n" > ~/.aws/credentials
            echo $CIRCLE_ACCESS_KEY_ID
            echo $CIRCLE_SECRET_KEY
            echo $DEV_ROLE_ARN
            unset AWS_SESSION_TOKEN
            aws configure set region us-west-2
            aws configure set output json
            temp_creds=$(aws sts assume-role --role-session-name DevelopersRole --role-arn $DEV_ROLE_ARN --profile circle | jq .Credentials)
            export AWS_ACCESS_KEY_ID=$(echo "$temp_creds" | jq .AccessKeyId | xargs)
            export AWS_SECRET_ACCESS_KEY=$(echo "$temp_creds" | jq .SecretAccessKey | xargs)
            export AWS_SESSION_TOKEN=$(echo "$temp_creds" | jq .SessionToken | xargs)
            aws configure list # Show confirmation of config
            task_arn=$(aws ecs list-task-definitions --family-prefix sinopia-api --region us-west-2 --sort DESC --max-items 1 | jq --raw-output --exit-status '.taskDefinitionArns[]')
            cluster_arn=$(aws ecs list-clusters --region us-west-2 | jq --raw-output --exit-status '.clusterArns[] | select(contains(":cluster/sinopia-stage"))')
            echo -n "task_arn=$task_arn\ncluster_arn=$cluster_arn\n"
            aws ecs update-service --service sinopia-api --region us-west-2 --cluster $cluster_arn --task-definition $task_arn --force-new-deployment
workflows:
  version: 2
  build:
    jobs:
      - dependencies:
          filters:
            branches:
              only:
                - /.*/
            tags:
              only:
                - /v.*/
      - build:
          requires:
            - dependencies
          filters:
            branches:
              only:
                - /.*/
            tags:
              only:
                - /v.*/
      - register_latest_image:
          requires:
            - build
          filters:
            branches:
              only:
                - main
            tags:
              ignore:
                - /v.*/
          context: ld4p
      - register_stage_image:
          requires:
            - build
          filters:
            branches:
              ignore:
                - /.*/
            tags:
              only:
                - /v.[0-9\.]+-beta/
          context: ld4p
      - register_stage_and_prod_image:
          requires:
            - build
          filters:
            branches:
              ignore:
                - /.*/
            tags:
              only:
                - /v.[0-9\.]+/
          context: ld4p
      - update_ecs_dev:
          requires:
            - register_latest_image
          context: ld4p
      - update_ecs_stage:
          requires:
            - register_stage_image
          context: ld4p
