version: 2.1
orbs:
  node: circleci/node@4.7.0
  docker: circleci/docker@1.7.0
  aws-cli: circleci/aws-cli@2.0
executors:
  default:
    docker:
      - image: 'cimg/node:14.17'
# commands:
#   deploy_ecs:
#     parameters:
#       role-arn:
#         type: env_var_name
#         default: DEV_ROLE_ARN
#       cluster:
#         type: string
#         default: sinopia-dev
#     steps:
#       - run: |
#           unset AWS_SESSION_TOKEN
#           aws configure set output json
#           temp_creds=$(aws sts assume-role --role-session-name DevelopersRole --role-arn ${<< parameters.role-arn >>} --profile default | jq .Credentials)
#           export AWS_ACCESS_KEY_ID=$(echo "$temp_creds" | jq .AccessKeyId | xargs)
#           export AWS_SECRET_ACCESS_KEY=$(echo "$temp_creds" | jq .SecretAccessKey | xargs)
#           export AWS_SESSION_TOKEN=$(echo "$temp_creds" | jq .SessionToken | xargs)
#           task_arn=$(aws ecs list-task-definitions --family-prefix sinopia-api --sort DESC --max-items 1 | jq --raw-output --exit-status '.taskDefinitionArns[]')
#           cluster_arn=$(aws ecs list-clusters | jq --raw-output --exit-status '.clusterArns[] | select(contains(":cluster/<< parameters.role-arn >>"))')
#           aws ecs update-service --service sinopia-api --cluster $cluster_arn --task-definition $task_arn --force-new-deployment
jobs:
  test:
    executor: default
    steps:
      - checkout
      - node/install-packages
      - run:
            name: Run NPM Tests
            command: npm run test
  lint:
    executor: default
    steps:
      - checkout
      - node/install-packages
      - run:
            name: Run Eslint
            command: npm run eslint
  validate:
    executor: default
    steps:
      - checkout
      - run:
          name: Validate API specification
          command: |
            sudo npm install -g openapi-enforcer-cli
            result=$(openapi-enforcer validate openapi.yml)
            [[ $result =~ "Document is valid" ]] && {
            echo "Validation good"
            exit 0
            } || {
            echo $result
            exit 1
            }
  deploy-ecs:
    parameters:
      role-arn:
        type: env_var_name
        default: DEV_ROLE_ARN
      cluster:
        type: string
        default: sinopia-dev
    executor: aws-cli/default
    steps:
      - aws-cli/setup:
          aws-access-key-id: CIRCLE_ACCESS_KEY_ID
          aws-secret-access-key: CIRCLE_SECRET_KEY
          aws-region: AWS_DEFAULT_REGION
      - run:
          name: Deploy to ECS
          command: |
            unset AWS_SESSION_TOKEN
            aws configure set output json
            temp_creds=$(aws sts assume-role --role-session-name DevelopersRole --role-arn ${<< parameters.role-arn >>} --profile default | jq .Credentials)
            export AWS_ACCESS_KEY_ID=$(echo "$temp_creds" | jq .AccessKeyId | xargs)
            export AWS_SECRET_ACCESS_KEY=$(echo "$temp_creds" | jq .SecretAccessKey | xargs)
            export AWS_SESSION_TOKEN=$(echo "$temp_creds" | jq .SessionToken | xargs)
            task_arn=$(aws ecs list-task-definitions --family-prefix sinopia-api --sort DESC --max-items 1 | jq -r --exit-status '.taskDefinitionArns[]')
            cluster_arn=$(aws ecs list-clusters | jq --raw-output --exit-status '.clusterArns[] | select(contains(":cluster/<< parameters.cluster >>"))')
            aws ecs update-service --service sinopia-api --cluster $cluster_arn --task-definition $task_arn --force-new-deployment
workflows:
  build:
    jobs:
      # TODO: These shouldn't run for tags.
      - test
      - lint
      - validate
      # TODO: These should depend on test, lint, validate.
      - docker/publish:
          name: publish-dev
          context: ld4p
          docker-password: DOCKER_PASS
          docker-username: DOCKER_USER
          image: ld4p/sinopia_api
          tag: latest
      - docker/publish:
          name: publish-dev-setup
          context: ld4p
          docker-password: DOCKER_PASS
          docker-username: DOCKER_USER
          image: ld4p/sinopia_dev_setup
          tag: latest
          dockerfile: Dockerfile-setup
      - docker/publish:
          name: publish-dev-cypress
          context: ld4p
          docker-password: DOCKER_PASS
          docker-username: DOCKER_USER
          image: ld4p/sinopia_dev_setup
          tag: cypress
          dockerfile: Dockerfile-setup-cypress
      - deploy-ecs:
          name: deploy-ecs-dev
          context: ld4p
          requires:
            - publish-dev

#             docker build -t ld4p/sinopia_dev_setup:latest -f Dockerfile-setup .
#             docker push ld4p/sinopia_dev_setup:latest
#             docker build -t ld4p/sinopia_dev_setup:cypress -f Dockerfile-setup-cypress .
#             docker push ld4p/sinopia_dev_setup:cypress


# Javascript Node CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#

# defaults: &defaults
#   docker:
#     - image: circleci/node:14.11.0
#   working_directory: ~/sinopia_api
#
# version: 2
# jobs:
#   dependencies:
#     <<: *defaults
#     steps:
#       - checkout
#       - restore_cache:
#           key: dependencies-prod-{{ checksum "package-lock.json" }}
#       - run: npm install --only=production
#       - save_cache:
#           key: dependencies-prod-{{ checksum "package-lock.json" }}
#           paths:
#             - node_modules
#       - restore_cache:
#           key: dependencies-ci-{{ checksum "package-lock.json" }}
#       - run: npm install # including CI/Test dependencies
#       - save_cache:
#           key: dependencies-ci-{{ checksum "package-lock.json" }}
#           paths:
#             - node_modules
#   build:
#     <<: *defaults
#     steps:
#       - checkout
#       - restore_cache:
#           key: dependencies-ci-{{ checksum "package-lock.json" }}
#       # - run:
#       #     name: Setup Code Climate test-reporter
#       #     command: |
#       #       curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
#       #       chmod +x ./cc-test-reporter
#       - run:
#           name: Lint and run unit tests
#           command: |
#             # ./cc-test-reporter before-build
#             npm run ci
#             # ./cc-test-reporter after-build --exit-code $?
#       - run:
#           name: Validate API specification
#           command: |
#             sudo npm install -g openapi-enforcer-cli
#             result=$(openapi-enforcer validate openapi.yml)
#             [[ $result =~ "Document is valid" ]] && {
#             echo "Validation good"
#             exit 0
#             } || {
#             echo $result
#             exit 1
#             }
#   register_latest_image:
#     <<: *defaults
#     steps:
#       - checkout
#       - setup_remote_docker
#       - restore_cache: # gives us back matching node_modules
#           key: dependencies-prod-{{ checksum "package-lock.json" }}
#       - attach_workspace:
#           at: .
#       - run:
#           name: Build & Register Images
#           command: |
#             echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
#             docker build -t ld4p/sinopia_api:latest .
#             docker push ld4p/sinopia_api:latest
#             docker build -t ld4p/sinopia_dev_setup:latest -f Dockerfile-setup .
#             docker push ld4p/sinopia_dev_setup:latest
#             docker build -t ld4p/sinopia_dev_setup:cypress -f Dockerfile-setup-cypress .
#             docker push ld4p/sinopia_dev_setup:cypress
#   register_stage_image:
#     <<: *defaults
#     steps:
#       - checkout
#       - setup_remote_docker
#       - restore_cache: # gives us back matching node_modules
#           key: dependencies-prod-{{ checksum "package-lock.json" }}
#       - attach_workspace:
#           at: .
#       - run:
#           name: Build & Register Images
#           command: |
#             docker build -t ld4p/sinopia_api:release-stage .
#             echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
#             docker push ld4p/sinopia_api:release-stage
#   register_stage_and_prod_image:
#     <<: *defaults
#     steps:
#       - checkout
#       - setup_remote_docker
#       - restore_cache: # gives us back matching node_modules
#           key: dependencies-prod-{{ checksum "package-lock.json" }}
#       - attach_workspace:
#           at: .
#       - run:
#           name: Build & Register Images
#           command: |
#             docker build -t ld4p/sinopia_api:release-stage -t ld4p/sinopia_api:release-prod .
#             echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
#             docker push ld4p/sinopia_api:release-stage
#             docker push ld4p/sinopia_api:release-prod
#   update_ecs_dev:
#     working_directory: ~/sinopia_api
#     docker: # NOT the default
#       - image: circleci/python:3.7-stretch-node-browsers
#     steps:
#       - run: sudo pip install awscli
#       - run:
#           name: Update AWS ECS
#           command: |
#             mkdir ~/.aws
#             echo -e "[circle]\naws_access_key_id=$CIRCLE_ACCESS_KEY_ID\naws_secret_access_key=$CIRCLE_SECRET_KEY\n" > ~/.aws/credentials
#             unset AWS_SESSION_TOKEN
#             aws configure set region us-west-2
#             aws configure set output json
#             temp_creds=$(aws sts assume-role --role-session-name DevelopersRole --role-arn $DEV_ROLE_ARN --profile circle | jq .Credentials)
#             export AWS_ACCESS_KEY_ID=$(echo "$temp_creds" | jq .AccessKeyId | xargs)
#             export AWS_SECRET_ACCESS_KEY=$(echo "$temp_creds" | jq .SecretAccessKey | xargs)
#             export AWS_SESSION_TOKEN=$(echo "$temp_creds" | jq .SessionToken | xargs)
#             aws configure list # Show confirmation of config
#             task_arn=$(aws ecs list-task-definitions --family-prefix sinopia-api --region us-west-2 --sort DESC --max-items 1 | jq --raw-output --exit-status '.taskDefinitionArns[]')
#             cluster_arn=$(aws ecs list-clusters --region us-west-2 | jq --raw-output --exit-status '.clusterArns[] | select(contains(":cluster/sinopia-dev"))')
#             # echo -n "task_arn=$task_arn\ncluster_arn=$cluster_arn\n"
#             aws ecs update-service --service sinopia-api --region us-west-2 --cluster $cluster_arn --task-definition $task_arn --force-new-deployment
#   update_ecs_stage:
#     working_directory: ~/sinopia_api
#     docker: # NOT the default
#       - image: circleci/python:3.7-stretch-node-browsers
#     steps:
#       - run: sudo pip install awscli
#       - run:
#           name: Update AWS ECS
#           command: |
#             mkdir ~/.aws
#             echo -e "[circle]\naws_access_key_id=$CIRCLE_ACCESS_KEY_ID\naws_secret_access_key=$CIRCLE_SECRET_KEY\n" > ~/.aws/credentials
#             unset AWS_SESSION_TOKEN
#             aws configure set region us-west-2
#             aws configure set output json
#             temp_creds=$(aws sts assume-role --role-session-name DevelopersRole --role-arn $STAGE_ROLE_ARN --profile circle | jq .Credentials)
#             export AWS_ACCESS_KEY_ID=$(echo "$temp_creds" | jq .AccessKeyId | xargs)
#             export AWS_SECRET_ACCESS_KEY=$(echo "$temp_creds" | jq .SecretAccessKey | xargs)
#             export AWS_SESSION_TOKEN=$(echo "$temp_creds" | jq .SessionToken | xargs)
#             aws configure list # Show confirmation of config
#             task_arn=$(aws ecs list-task-definitions --family-prefix sinopia-api --region us-west-2 --sort DESC --max-items 1 | jq --raw-output --exit-status '.taskDefinitionArns[]')
#             cluster_arn=$(aws ecs list-clusters --region us-west-2 | jq --raw-output --exit-status '.clusterArns[] | select(contains(":cluster/sinopia-staging"))')
#             aws ecs update-service --service sinopia-api --region us-west-2 --cluster $cluster_arn --task-definition $task_arn --force-new-deployment
#   update_ecs_stage_and_prod:
#     working_directory: ~/sinopia_api
#     docker: # NOT the default
#       - image: circleci/python:3.7-stretch-node-browsers
#     steps:
#       - run: sudo pip install awscli
#       - run:
#           name: Update AWS ECS
#           command: |
#             mkdir ~/.aws
#             echo -e "[circle]\naws_access_key_id=$CIRCLE_ACCESS_KEY_ID\naws_secret_access_key=$CIRCLE_SECRET_KEY\n" > ~/.aws/credentials
#             unset AWS_SESSION_TOKEN
#             aws configure set region us-west-2
#             aws configure set output json
#             # Stage
#             temp_creds=$(aws sts assume-role --role-session-name DevelopersRole --role-arn $STAGE_ROLE_ARN --profile circle | jq .Credentials)
#             export AWS_ACCESS_KEY_ID=$(echo "$temp_creds" | jq .AccessKeyId | xargs)
#             export AWS_SECRET_ACCESS_KEY=$(echo "$temp_creds" | jq .SecretAccessKey | xargs)
#             export AWS_SESSION_TOKEN=$(echo "$temp_creds" | jq .SessionToken | xargs)
#             aws configure list # Show confirmation of config
#             task_arn=$(aws ecs list-task-definitions --family-prefix sinopia-api --region us-west-2 --sort DESC --max-items 1 | jq --raw-output --exit-status '.taskDefinitionArns[]')
#             cluster_arn=$(aws ecs list-clusters --region us-west-2 | jq --raw-output --exit-status '.clusterArns[] | select(contains(":cluster/sinopia-staging"))')
#             aws ecs update-service --service sinopia-api --region us-west-2 --cluster $cluster_arn --task-definition $task_arn --force-new-deployment
#             # Prod
#             temp_creds=$(aws sts assume-role --role-session-name DevelopersRole --role-arn $PROD_ROLE_ARN --profile circle | jq .Credentials)
#             export AWS_ACCESS_KEY_ID=$(echo "$temp_creds" | jq .AccessKeyId | xargs)
#             export AWS_SECRET_ACCESS_KEY=$(echo "$temp_creds" | jq .SecretAccessKey | xargs)
#             export AWS_SESSION_TOKEN=$(echo "$temp_creds" | jq .SessionToken | xargs)
#             aws configure list # Show confirmation of config
#             task_arn=$(aws ecs list-task-definitions --family-prefix sinopia-api --region us-west-2 --sort DESC --max-items 1 | jq --raw-output --exit-status '.taskDefinitionArns[]')
#             cluster_arn=$(aws ecs list-clusters --region us-west-2 | jq --raw-output --exit-status '.clusterArns[] | select(contains(":cluster/sinopia-production"))')
#             aws ecs update-service --service sinopia-api --region us-west-2 --cluster $cluster_arn --task-definition $task_arn --force-new-deployment
# workflows:
#   version: 2
#   build:
#     jobs:
#       - dependencies:
#           filters:
#             branches:
#               only:
#                 - /.*/
#             tags:
#               only:
#                 - /v.*/
#       - build:
#           requires:
#             - dependencies
#           filters:
#             branches:
#               only:
#                 - /.*/
#             tags:
#               only:
#                 - /v.*/
#       - register_latest_image:
#           requires:
#             - build
#           filters:
#             branches:
#               only:
#                 - main
#             tags:
#               ignore:
#                 - /v.*/
#           context: ld4p
#       - register_stage_image:
#           requires:
#             - build
#           filters:
#             branches:
#               ignore:
#                 - /.*/
#             tags:
#               only:
#                 - /v.[0-9\.]+-beta/
#           context: ld4p
#       - register_stage_and_prod_image:
#           requires:
#             - build
#           filters:
#             branches:
#               ignore:
#                 - /.*/
#             tags:
#               only:
#                 - /v.[0-9\.]+/
#           context: ld4p
#       - update_ecs_dev:
#           requires:
#             - register_latest_image
#           filters:
#             branches:
#               only:
#                 - main
#             tags:
#               ignore:
#                 - /v.*/
#           context: ld4p
#       - update_ecs_stage:
#           requires:
#             - register_stage_image
#           filters:
#             branches:
#               ignore:
#                 - /.*/
#             tags:
#               only:
#                 - /v.[0-9\.]+-beta/
#           context: ld4p
#       - update_ecs_stage_and_prod:
#           requires:
#             - register_stage_and_prod_image
#           filters:
#             branches:
#               ignore:
#                 - /.*/
#             tags:
#               only:
#                 - /v.[0-9\.]+/
#           context: ld4p
